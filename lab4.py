import math
from collections import Counter


# ==============================================================================
# ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ (ТЕОРИЯ ЧИСЕЛ)
# ==============================================================================

def get_prime_factorization(n):
    """
    Возвращает словарь с простыми множителями числа n и их степенями.
    Например, для 12 вернет {2: 2, 3: 1}.
    """
    factors = Counter()
    d = 2
    temp = n
    while d * d <= temp:
        while temp % d == 0:
            factors[d] += 1
            temp //= d
        d += 1
    if temp > 1:
        factors[temp] += 1
    return factors


def phi(n, factors=None):
    """
    Вычисляет функцию Эйлера φ(n).
    Использует предварительно вычисленные множители, если они предоставлены.
    """
    if n == 1:
        return 1
    if factors is None:
        factors = get_prime_factorization(n)

    result = n
    for p in factors:
        result = result // p * (p - 1)
    return result


def tau(factors):
    """
    Вычисляет количество делителей τ(n) по его простым множителям.
    """
    if not factors:
        return 1
    result = 1
    for exp in factors.values():
        result *= (exp + 1)
    return result


def sigma(factors):
    """
    Вычисляет сумму делителей σ(n) по его простым множителям.
    """
    if not factors:
        return 1
    result = 1
    for p, exp in factors.items():
        result *= (p ** (exp + 1) - 1) // (p - 1)
    return result


def legendre_exponent(n, p):
    """
    Вычисляет показатель степени простого числа p в разложении n! (Формула Лежандра).
    """
    exponent = 0
    power_of_p = p
    while power_of_p <= n:
        exponent += n // power_of_p
        power_of_p *= p
    return exponent


# ==============================================================================
# РЕШЕНИЕ ЗАДАНИЙ
# ==============================================================================

def solve_task_1():
    """
    Задание 1. Вычислите значения функций Эйлера, σ и τ от числа a.
    Вариант 1.1: a = 142560
    """
    print("--- Задание 1.1 ---")
    a = 142560
    factors = get_prime_factorization(a)

    phi_a = phi(a, factors)
    tau_a = tau(factors)
    sigma_a = sigma(factors)

    print(f"Число a = {a}")
    print(f"Простое разложение: {dict(factors)}")
    print(f"Функция Эйлера φ(a) = {phi_a}")
    print(f"Количество делителей τ(a) = {tau_a}")
    print(f"Сумма делителей σ(a) = {sigma_a}\n")


def solve_task_2():
    """
    Задание 2. Сколькими нулями заканчивается десятичная запись числа (a!).
    Вариант 2.1: a = 92
    """
    print("--- Задание 2.1 ---")
    a = 92
    # Количество нулей определяется степенью вхождения 5 в разложение a!
    num_zeros = legendre_exponent(a, 5)
    print(f"Число a = {a}")
    print(f"Десятичная запись числа {a}! заканчивается на {num_zeros} нулей.\n")


def solve_task_3():
    """
    Задание 3. Пусть a! = 2^α2 * 3^α3 * 5^α5 * ... каноническое разложение a!.
    Вычислите τ(2^α2 * 3^α3 * 5^α5).
    Вариант 3.1: a = 23
    """
    print("--- Задание 3.1 ---")
    a = 23
    alpha_2 = legendre_exponent(a, 2)
    alpha_3 = legendre_exponent(a, 3)
    alpha_5 = legendre_exponent(a, 5)

    # τ(2^α2 * 3^α3 * 5^α5) = (α2 + 1)(α3 + 1)(α5 + 1)
    result = (alpha_2 + 1) * (alpha_3 + 1) * (alpha_5 + 1)

    print(f"Число a = {a}")
    print(f"Показатели в разложении {a}!: α2={alpha_2}, α3={alpha_3}, α5={alpha_5}")
    print(f"τ(2^{alpha_2} * 3^{alpha_3} * 5^{alpha_5}) = {result}\n")


def solve_task_4():
    """
    Задание 4. Пусть a! = 2^α2 * 3^α3 * 5^α5 * ... каноническое разложение a!.
    Вычислите σ(5^α5 * 7^α7 * 11^α11).
    Вариант 4.1: a = 21
    """
    print("--- Задание 4.1 ---")
    a = 21
    alpha_5 = legendre_exponent(a, 5)
    alpha_7 = legendre_exponent(a, 7)
    alpha_11 = legendre_exponent(a, 11)

    # σ(p^k) = (p^(k+1) - 1) / (p - 1)
    # Так как 5, 7, 11 взаимно просты, σ(n*m) = σ(n)*σ(m)
    sigma_5 = (5 ** (alpha_5 + 1) - 1) // (5 - 1)
    sigma_7 = (7 ** (alpha_7 + 1) - 1) // (7 - 1)
    sigma_11 = (11 ** (alpha_11 + 1) - 1) // (11 - 1)

    result = sigma_5 * sigma_7 * sigma_11

    print(f"Число a = {a}")
    print(f"Показатели в разложении {a}!: α5={alpha_5}, α7={alpha_7}, α11={alpha_11}")
    print(f"σ(5^{alpha_5} * 7^{alpha_7} * 11^{alpha_11}) = {result}\n")


def solve_task_5():
    """
    Задание 5. Решите уравнение φ(x) = 8.
    Вариант 5.1: φ(x) = 8
    """
    print("--- Задание 5.1 ---")
    target_phi = 8
    solutions = []
    # Поиск решений в разумном диапазоне
    limit = 100
    for x in range(1, limit):
        if phi(x) == target_phi:
            solutions.append(x)

    print(f"Решения уравнения φ(x) = {target_phi}: {solutions}\n")


def solve_task_6():
    """
    Задание 6. Найдите все простые делители числа х из уравнения 11φ(x) = 4x.
    Вариант 6.1: 11φ(x) = 4x
    """
    print("--- Задание 6.1 ---")
    # Решение:
    # 11 * x * Π(1 - 1/p) = 4x  (где p - простые делители x)
    # 11 * Π((p-1)/p) = 4
    # 11 * (p1-1)/p1 * (p2-1)/p2 * ... = 4
    # Левая часть содержит 11, значит, один из p должен быть 11.
    # 11 * (10/11) * Π'((p-1)/p) = 4
    # 10 * Π'((p-1)/p) = 4  =>  Π'((p-1)/p) = 4/10 = 2/5
    # Знаменатель 5 намекает на p2=5.
    # 10 * (4/5) * Π''((p-1)/p) = 4
    # 8 * Π'' = 4  =>  Π''((p-1)/p) = 1/2
    # Это выполняется для p3=2, т.к. (2-1)/2 = 1/2.
    prime_divisors = {2, 5, 11}
    print("Уравнение: 11φ(x) = 4x")
    print(f"Простые делители числа x: {sorted(list(prime_divisors))}\n")


def solve_task_7():
    """
    Задание 7. Решите уравнение φ(3^x * 5^y * 7^z) = 720.
    Вариант 7.1: φ(3^x * 5^y * 7^z) = 720
    """
    print("--- Задание 7.1 ---")
    target_phi = 720
    # φ(3^x) * φ(5^y) * φ(7^z) = 720
    # (2*3^(x-1)) * (4*5^(y-1)) * (6*7^(z-1)) = 720
    # 48 * 3^(x-1) * 5^(y-1) * 7^(z-1) = 720
    # 3^(x-1) * 5^(y-1) * 7^(z-1) = 720 / 48 = 15
    # 15 = 3^1 * 5^1 * 7^0
    x = 1 + 1  # 3^(x-1) = 3^1
    y = 1 + 1  # 5^(y-1) = 5^1
    z = 0 + 1  # 7^(z-1) = 7^0

    print(f"Уравнение: φ(3^x * 5^y * 7^z) = {target_phi}")
    print(f"Решение: x = {x}, y = {y}, z = {z}\n")


def solve_task_8():
    """
    Задание 8. Найдите n, если известен его делитель m и значение τ(n).
    Вариант 8.1: m = 135, τ(n) = 21
    """
    print("--- Задание 8.1 ---")
    m = 135
    tau_n = 21

    # m = 135 = 3^3 * 5^1. Значит n = 3^a * 5^b * ..., где a >= 3, b >= 1.
    # τ(n) = 21 = 3 * 7.
    # (a+1)(b+1)... = 21.
    # Проверяем комбинации:
    # 1. a+1=3 (a=2), b+1=7 (b=6). Не подходит, т.к. a < 3.
    # 2. a+1=7 (a=6), b+1=3 (b=2). Подходит, т.к. a=6>=3 и b=2>=1.

    a = 6
    b = 2
    n = 3 ** a * 5 ** b

    print(f"Дано: m = {m}, τ(n) = {tau_n}")
    print(f"Из m=3^3*5^1 следует, что n=3^a*5^b... с a>=3, b>=1.")
    print(f"Из τ(n)=21=(a+1)(b+1)... следует, что a=6, b=2.")
    print(f"Искомое число n = 3^{a} * 5^{b} = {n}\n")


def solve_task_9():
    """
    Задание 9. Пусть n = p^α * q^β. Найдите τ(n^3), если известно значение τ(n^2).
    Вариант 9.1: τ(n^2) = 77
    """
    print("--- Задание 9.1 ---")
    tau_n2 = 77
    # τ(n^2) = τ(p^(2α) * q^(2β)) = (2α + 1)(2β + 1) = 77.
    # 77 = 7 * 11.
    # 2α + 1 = 7  => α = 3
    # 2β + 1 = 11 => β = 5 (или наоборот, что не влияет на результат)
    alpha = 3
    beta = 5

    # τ(n^3) = τ(p^(3α) * q^(3β)) = (3α + 1)(3β + 1)
    result = (3 * alpha + 1) * (3 * beta + 1)

    print(f"Дано: τ(n^2) = {tau_n2}")
    print(f"Из (2α+1)(2β+1)=77 находим α=3, β=5.")
    print(f"τ(n^3) = (3α+1)(3β+1) = ({3 * alpha + 1})*({3 * beta + 1}) = {result}\n")


def solve_task_10():
    """
    Задание 10. Перечислите все натуральные числа a такие, что количество
    натуральных чисел, не превышающих a и имеющих с a наибольший
    общий делитель 15, равно b.
    Вариант 10.1: b = 16
    """
    print("--- Задание 10.1 ---")
    b = 16
    gcd_val = 15

    # Количество чисел k (1<=k<=a), для которых НОД(k,a)=15, равно φ(a/15).
    # Таким образом, решаем уравнение φ(x) = 16, где x = a/15.
    target_phi = b
    solutions_for_x = []
    # Поиск решений в разумном диапазоне
    limit = 100
    for x in range(1, limit):
        if phi(x) == target_phi:
            solutions_for_x.append(x)

    solutions_for_a = [x * gcd_val for x in solutions_for_x]

    print(f"Дано: b = {b}, НОД = {gcd_val}")
    print(f"Задача сводится к решению уравнения φ(a/{gcd_val}) = {b}.")
    print(f"Решения для x = a/{gcd_val}: {solutions_for_x}")
    print(f"Искомые значения a: {solutions_for_a}\n")


# ==============================================================================
# ОСНОВНОЙ БЛОК ВЫПОЛНЕНИЯ
# ==============================================================================
if __name__ == "__main__":
    solve_task_1()
    solve_task_2()
    solve_task_3()
    solve_task_4()
    solve_task_5()
    solve_task_6()
    solve_task_7()
    solve_task_8()
    solve_task_9()
    solve_task_10()